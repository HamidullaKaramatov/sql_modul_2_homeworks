use w3reourse

homework 5
select* from 
--1-misol
-- Customer jadvali
CREATE TABLE customer (
    customer_id INT PRIMARY KEY,
    cust_name VARCHAR(50),
    city VARCHAR(50),
    grade INT,
    salesman_id INT,
    FOREIGN KEY (salesman_id) REFERENCES Salesman(salesman_id)
);

-- Ma'lumotlarni Customer jadvaliga qo'shish
INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) VALUES
(3002, 'Nick Rimando', 'New York', 100, 5001),
(3005, 'Graham Zusi', 'California', 200, 5002),
(3001, 'Brad Guzan', 'London', 100, 5005),
(3004, 'Fabian Johns', 'Paris', 300, 5006),
(3007, 'Brad Davis', 'New York', 200, 5001),
(3009, 'Geoff Camero', 'Berlin', 100, 5003),
(3008, 'Julian Green', 'London', 300, 5002),
(3003, 'Jozy Altidor', 'Moncow', 200, 5007);


CREATE TABLE Salesman (
    salesman_id INT PRIMARY KEY,
    name VARCHAR(50),
    city VARCHAR(50),
    commission DECIMAL(5, 2)
);


INSERT INTO Salesman (salesman_id, name, city, commission) VALUES
(5001, 'James Hoog', 'New York', 0.15),
(5002, 'Nail Knite', 'Paris', 0.13),
(5005, 'Pit Alex', 'London', 0.11),
(5006, 'Mc Lyon', 'Paris', 0.14),
(5003, 'Lauson Hen', 'San Jose', 0.12),
(5007, 'Paul Adam', 'Rome', 0.13);
drop table Orders
CREATE TABLE Orders (
    ord_no INT PRIMARY KEY,
    purch_amt DECIMAL(10, 2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT,
    FOREIGN KEY (salesman_id) REFERENCES Salesman(salesman_id)
);

INSERT INTO Orders (ord_no, purch_amt, ord_date, customer_id, salesman_id) VALUES
(70001, 150.5, '2012-10-05', 3005, 5002),
(70009, 270.65, '2012-09-10', 3001, 5005),
(70002, 65.26, '2012-10-05', 3002, 5001),
(70004, 110.5, '2012-08-17', 3009, 5003),
(70007, 948.5, '2012-09-10', 3005, 5002),
(70005, 2400.6, '2012-07-27', 3007, 5001),
(70008, 5760, '2012-09-10', 3002, 5001),
(70010, 1983.43, '2012-10-10', 3004, 5006),
(70003, 2480.4, '2012-10-10', 3009, 5003),
(70012, 250.45, '2012-06-27', 3008, 5002),
(70011, 75.29, '2012-08-17', 3003, 5007),
(70013, 3045.6, '2012-04-25', 3002, 5001);

select* from Salesman
--javob-1
select * from Orders
where salesman_id=(select salesman_id from Salesman where name='paul adam')
--2. From the following tables write a  SQL query to find all orders generated by London-based salespeople. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select * from Orders
where salesman_id in (select salesman_id from Salesman where city='london')

--3. From the following tables write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select * from Orders
where salesman_id=(select distinct salesman_id from Orders where customer_id=3007)

--4. From the following tables write a SQL query to find the order values greater than the average order value of 10th October 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select * from Orders
where  purch_amt>(select avg(purch_amt) from Orders where ord_date= '10/10/2012')

--5. From the following tables, write a SQL query to find all the orders generated in New York city. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select * from Orders
where salesman_id in (select salesman_id from Salesman where city='new york')

--6. From the following tables write a SQL query to determine the commission of the salespeople in Paris. Return commission.
select commission from Salesman
where salesman_id in (select salesman_id from Customer where city='paris')

---7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
SELECT *
FROM customer
WHERE customer_id =(SELECT salesman_id - 2001
     FROM salesman
     WHERE name = 'Mc Lyon')

--8. From the following tables write a  SQL query to count the number of customers with grades above the average in New York City. Return grade and count.

--9. From the following tables, write a  SQL query to find those salespeople who earned the maximum commission. Return ord_no, purch_amt, ord_date, and salesman_id.
SELECT ord_no, purch_amt, ord_date, salesman_id FROM orders 
WHERE salesman_id IN (SELECT salesman_id 
    FROM salesman
    WHERE commission = (SELECT MAX(commission) 
        FROM salesman))

--10. From the following tables write  SQL query to find the customers who placed orders on 17th August 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.
SELECT b.*, a.name
FROM orders as b, customer as a
WHERE a.id = b.customer_id
AND b.ord_date = '2012-08-17'

--11. From the following tables write a SQL query to find salespeople who had more than one customer. Return salesman_id and name.
SELECT salesman_id, name 
FROM salesman a 
WHERE 1 < 
    (SELECT COUNT(*) 
    FROM customer 
     WHERE salesman_id = a.salesman_id)

--12. From the following tables write a  SQL query to find those orders, which are higher than the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT * FROM orders a WHERE purch_amt >    (SELECT AVG(purch_amt) FROM orders b 
     WHERE b.customer_id = a.customer_id)

--13. From the following tables write a  SQL query to find those orders that are equal or higher than the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT * FROM orders a WHERE purch_amt >=    (SELECT AVG(purch_amt) FROM orders b 
     WHERE b.customer_id = a.customer_id)

--14. Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date.
SELECT ord_date, SUM(purch_amt) FROM orders a GROUP BY ord_date HAVING SUM(purch_amt) >    (SELECT 1000.00 + MAX(purch_amt) 
     FROM orders b 
     WHERE a.ord_date = b.ord_date)

-- 15. Write a query to extract all data from the customer table if and only if one or more of the customers in the customer table are located in London.  
SELECT customer_id, cust_name, city FROM customer WHERE EXISTS (SELECT *
    FROM customer 
    WHERE city='London')

--16. From the following tables write a  SQL query to find salespeople who deal with multiple customers. Return salesman_id, name, city and commission.
SELECT * FROM salesman WHERE salesman_id IN (SELECT DISTINCT salesman_id FROM customer a   WHERE EXISTS (  SELECT * FROM customer b      WHERE b.salesman_id = a.salesman_id 
      AND b.cust_name <> a.cust_name))

--17. From the following tables write a  SQL query to find salespeople who deal with a single customer. Return salesman_id, name, city and commission.
SELECT * FROM salesman 
WHERE salesman_id IN (SELECT DISTINCT salesman_id  FROM customer a 
   WHERE NOT EXISTS (SELECT * FROM customer b WHERE a.salesman_id = b.salesman_id AND a.cust_name <> b.cust_name))


--18. From the following tables, write a SQL query to find the salespeople who deal the customers with more than one order. Return salesman_id, name, city and commission.
SELECT * FROM salesman a WHERE EXISTS    (SELECT * FROM customer b   WHERE a.salesman_id = b.salesman_id 	 AND 1 <(SELECT COUNT (*)              
		  FROM orders             
		  WHERE orders.customer_id = b.customer_id)) 

--19. From the following tables write a SQL query to find all salespeople who are located in any city where there is at least one customer. Return salesman_id, name, city and commission
SELECT * FROM salesman WHERE city = ANY (SELECT city
     FROM customer)
--20. From the following tables write a SQL query to find salespeople whose place of residence matches any city where customers live. Return salesman_id, name, city and commission.
SELECT * FROM salesman WHERE city IN (SELECT city
     FROM customer)
